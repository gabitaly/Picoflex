#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        PicoFlex.py
#
#  Project :     PicoFLEX
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      sci.comp$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["PicoFlex", "PicoFlexClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(PicoFlex.additionnal_import) ENABLED START -----#
import socket
import select
import traceback
#----- PROTECTED REGION END -----#	//	PicoFlex.additionnal_import

# Device States Description
# INIT : The Device goes into this State during initialization..
# ON : The Device is in this State when the PicoFLEX is switched on and in normal \noperation.
# OFF : The Device is in this State when the PicoFlex is switched OFF.
# FAULT : The tangoDevice enters this state when there is an erro, e.g. a communication error.


class PicoFlex (PyTango.Device_4Impl):
    """This Tango Device Class is used to configure, control and readout 
    the PicoFLEX picoammeter."""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(PicoFlex.global_variables) ENABLED START -----#
    RNG0_Offset = 0
    RNG1_Offset = 0
    RNG2_Offset = 0
    
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)   
    
    #----- PROTECTED REGION END -----#	//	PicoFlex.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        PicoFlex.init_device(self)
        #----- PROTECTED REGION ID(PicoFlex.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(PicoFlex.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_ch1rng_read = 0
        self.attr_ch2rng_read = 0
        self.attr_ch1ri_read = 0.0
        self.attr_ch1rb_read = 0
        self.attr_ch1dac_read = ""
        self.attr_ch2ri_read = 0.0
        self.attr_ch2rb_read = 0
        self.attr_ch2dac_read = ""
        self.attr_dacsv_read = 0.0
        self.attr_dacsb_read = 0
        self.attr_picoBoardDescr_read = ""
        self.attr_picoMainBoardCode_read = ""
        self.attr_picoBoardCalDate_read = ""
        self.attr_picoBoardProdDate_read = ""
        self.attr_picoBoardSerialNo_read = ""
        self.attr_picoSysStatus_read = ""
        self.attr_picoMainFwVer_read = ""
        self.attr_picoBoardInfo_read = ""
        self.attr_picoModuleFwVer_read = ""
        self.attr_signalSum_read = 0.0
        self.attr_signalDiff_read = 0.0
        self.attr_propDiff_read = False
        self.attr_picoModuleBoardCode_read = ""
        #----- PROTECTED REGION ID(PicoFlex.init_device) ENABLED START -----#
        self.set_state(PyTango.DevState.INIT)        
        self.set_status("Initialising Device...")        
        

        try:
            # Connects to PicoFLEX hardware...
            self.s.connect((self.ip_address,self.port))
                       
            #if  self.read_picoMainFwVer(self):
            if  self.isPicoFlexAlive():
                self.set_state(PyTango.DevState.ON)
                self.set_status("Device initialised") 
                self.debug_stream("Device initialized. PicoFLEX main Board Version %s" % self.attr_picoMainFwVer_read)                                                          
            else:
                self.set_state(PyTango.DevState.FAULT)  
                self.set_status("init_device() FAILED")
                self.error_stream("init_device() FAILED")  
                self.s.close()                                                                              
                
        except socket.error, e:
            self.set_state(PyTango.DevState.FAULT) 
            self.set_status("init_device() FAILED")
            self.error_stream("Couldn't connect with the socket: %s" % e ) 
            self.s.close()
                                  
                    
        #----- PROTECTED REGION END -----#	//	PicoFlex.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(PicoFlex.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.always_executed_hook

    # -------------------------------------------------------------------------
    #    PicoFlex read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_ch1rng(self, attr):
        self.debug_stream("In read_ch1rng()")
        #----- PROTECTED REGION ID(PicoFlex.ch1rng_read) ENABLED START -----#
        self.set_status("Reading/writing data")                     
        cmd_str = "CH1RNG:?"
        resp_err = 0
        resp_ack = 1
        resp_nak = 2
        resp = self.socket_write_and_read(cmd_str)
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','read_ch1rng()')            
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_ch1rng()')        
        else:
            self.debug_stream("Reply to query is " + str(resp))
            self.attr_ch1rng_read = int(resp)                   
            attr.set_value(self.attr_ch1rng_read)
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.ch1rng_read
        
    def write_ch1rng(self, attr):
        self.debug_stream("In write_ch1rng()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(PicoFlex.ch1rng_write) ENABLED START -----#
        self.set_status("Reading/writing data")                             
        resp_err = 0
        resp_ack = 1
        resp_nak = 2

        cmd_str="CH1RNG:"+str(data)
                                  
        resp = self.socket_write_and_read(cmd_str)
        
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','write_ch1rng()')            
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_ch1rng()')                                           
            
        #----- PROTECTED REGION END -----#	//	PicoFlex.ch1rng_write
        
    def read_ch2rng(self, attr):
        self.debug_stream("In read_ch2rng()")
        #----- PROTECTED REGION ID(PicoFlex.ch2rng_read) ENABLED START -----#
        self.set_status("Reading/writing data")                             
        cmd_str = "CH2RNG:?"
        resp_err = 0
        resp_ack = 1
        resp_nak = 2
        resp = self.socket_write_and_read(cmd_str)
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','read_ch2rng()')              
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_ch2rng()')        
        else:
            self.debug_stream("Reply to query is " + str(resp).rstrip('\r\n'))
            self.attr_ch2rng_read = int(resp)                           
            attr.set_value(self.attr_ch2rng_read)
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.ch2rng_read
        
    def write_ch2rng(self, attr):
        self.debug_stream("In write_ch2rng()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(PicoFlex.ch2rng_write) ENABLED START -----#        
        self.set_status("Reading/writing data")                             
        resp_err = 0
        resp_ack = 1
        resp_nak = 2
        
        cmd_str="CH2RNG:"+str(data)
                                  
        resp = self.socket_write_and_read(cmd_str)
        
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error',
                                           'No reply from device',
                                           'write_ch2rng()')                
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','write_ch2rng()')
        #----- PROTECTED REGION END -----#	//	PicoFlex.ch2rng_write
        
    def read_ch1ri(self, attr):
        self.debug_stream("In read_ch1ri()")
        #----- PROTECTED REGION ID(PicoFlex.ch1ri_read) ENABLED START -----#
        self.set_status("Reading/writing data")                             
        cmd_str = "CH1RI:?"
        resp_err = 0
        resp_ack = 1
        resp_nak = 2
        resp = self.socket_write_and_read(cmd_str)
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("No reply from PicoFlex, check socket status !")             
            self.debug_stream("No reply from PicoFlex, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','read_ch1ri()') 
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_ch1ri()')
        else:
            self.debug_stream("Reply to query is " + str(resp).rstrip('\r\n'))
            self.attr_ch1ri_read = float(resp)                   
            attr.set_value(self.attr_ch1ri_read)
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.ch1ri_read
        
    def read_ch1rb(self, attr):
        self.debug_stream("In read_ch1rb()")
        #----- PROTECTED REGION ID(PicoFlex.ch1rb_read) ENABLED START -----#
        self.set_status("Reading/writing data")                             
        cmd_str = "CH1RB:?"
        resp_err = 0
        resp_ack = 1
        resp_nak = 2
        resp = self.socket_write_and_read(cmd_str)
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','read_ch1rb()')             
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_ch1rb()')        
        else:
            self.debug_stream("Reply to query is " + str(resp).rstrip('\r\n'))
            self.attr_ch1rb_read = float(resp)                               
            attr.set_value(self.attr_ch1rb_read)
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.ch1rb_read
        
    def read_ch1dac(self, attr):
        self.debug_stream("In read_ch1dac()")
        #----- PROTECTED REGION ID(PicoFlex.ch1dac_read) ENABLED START -----#
        self.set_status("Reading/writing data")
        cmd_str = "CH1DAC:?"
        resp_err = 0
        resp_ack = 1
        resp_nak = 2
        resp = self.socket_write_and_read(cmd_str)
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','read_ch1dac()')             
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_ch1dac()')        
        else:
            self.debug_stream("Reply to query is " + str(resp).rstrip('\r\n'))
            self.attr_ch1dac_read = str(resp)                               
            attr.set_value(self.attr_ch1dac_read)
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.ch1dac_read
        
    def write_ch1dac(self, attr):
        self.debug_stream("In write_ch1dac()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(PicoFlex.ch1dac_write) ENABLED START -----#
        self.set_status("Reading/writing data")
        resp_err = 0
        resp_ack = 1
        resp_nak = 2
        cmd_str=''
        
        if data == "0":
            cmd_str = "CH1DAC:OFF"
        elif data == "1":
            cmd_str = "CH1DAC:ON"
                    
        resp = self.socket_write_and_read(cmd_str)
        
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','write_ch1dac()')     
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','write_ch1dac()')
                              
        #----- PROTECTED REGION END -----#	//	PicoFlex.ch1dac_write
        
    def read_ch2ri(self, attr):
        self.debug_stream("In read_ch2ri()")
        #----- PROTECTED REGION ID(PicoFlex.ch2ri_read) ENABLED START -----#
        self.set_status("Reading/writing data")
        cmd_str = "CH2RI:?"
        resp_err = 0
        resp_ack = 1
        resp_nak = 2
        resp = self.socket_write_and_read(cmd_str)
        if resp == resp_err:
            # If the PicoFlex does not reply the device goes in FAULT
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("No reply from PicoFlex, check socket status !")             
            self.debug_stream("No reply from PicoFlex, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','read_ch2ri()')  
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_ch2ri()')    
        else:
            # PicoFlex returns a value
            self.debug_stream("Reply to query is " + str(resp).rstrip('\r\n'))
            self.attr_ch2ri_read = float(resp)                   
            attr.set_value(self.attr_ch2ri_read)
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.ch2ri_read
        
    def read_ch2rb(self, attr):
        self.debug_stream("In read_ch2rb()")
        #----- PROTECTED REGION ID(PicoFlex.ch2rb_read) ENABLED START -----#
        self.set_status("Reading/writing data")
        cmd_str = "CH2RB:?"
        resp_err = 0
        resp_ack = 1
        resp_nak = 2
        resp = self.socket_write_and_read(cmd_str)
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','read_ch2rb()')             
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_ch2rb()')        
        else:
            self.debug_stream("Reply to query is " + str(resp).rstrip('\r\n'))
            self.attr_ch2rb_read = float(resp)                               
            attr.set_value(self.attr_ch2rb_read)
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.ch2rb_read
        
    def read_ch2dac(self, attr):
        self.debug_stream("In read_ch2dac()")
        #----- PROTECTED REGION ID(PicoFlex.ch2dac_read) ENABLED START -----#
        self.set_status("Reading/writing data")
        cmd_str = "CH2DAC:?"
        resp_err = 0
        resp_ack = 1
        resp_nak = 2
        resp = self.socket_write_and_read(cmd_str)
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','read_ch2dac()')             
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_ch2dac()')        
        else:
            self.debug_stream("Reply to query is " + str(resp).rstrip('\r\n'))
            self.attr_ch2dac_read = str(resp)                               
            attr.set_value(self.attr_ch2dac_read)
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.ch2dac_read
        
    def write_ch2dac(self, attr):
        self.debug_stream("In write_ch2dac()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(PicoFlex.ch2dac_write) ENABLED START -----#
        self.set_status("Reading/writing data")
        resp_err = 0
        resp_ack = 1
        resp_nak = 2
        cmd_str=''
        
        if data == "0":
            cmd_str = "CH2DAC:OFF"
        elif data == "1":
            cmd_str = "CH2DAC:ON"
                    
        resp = self.socket_write_and_read(cmd_str)
        
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','write_ch2dac()') 
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','write_ch2dac()')
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.ch2dac_write
        
    def read_dacsv(self, attr):
        self.debug_stream("In read_dacsv()")
        #----- PROTECTED REGION ID(PicoFlex.dacsv_read) ENABLED START -----#
        self.set_status("Reading/writing data")
        cmd_str = "DACSV:?"
        resp_err = 0
        resp_ack = 1
        resp_nak = 2                                                  
        resp = self.socket_write_and_read(cmd_str)
        self.debug_stream("Resp from query " + cmd_str +" :%s" %resp)
        
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','read_dacsv()')             
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_dacsv()')        
        else:        
            self.debug_stream("Reply to query is " + str(resp).rstrip('\r\n'))
            self.attr_dacsv_read = float(resp)
            attr.set_value(self.attr_dacsv_read)
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.dacsv_read
        
    def write_dacsv(self, attr):
        self.debug_stream("In write_dacsv()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(PicoFlex.dacsv_write) ENABLED START -----#
        self.set_status("Reading/writing data")
        cmd_str = "DACSV:"+str(data)
        resp_err = 0
        resp_ack = 1
        resp_nak = 2         
                                    
        resp = self.socket_write_and_read(cmd_str)
        
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','write_dacsv()')             
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','write_dacsv()')
        #----- PROTECTED REGION END -----#	//	PicoFlex.dacsv_write
        
    def read_dacsb(self, attr):
        self.debug_stream("In read_dacsb()")
        #----- PROTECTED REGION ID(PicoFlex.dacsb_read) ENABLED START -----#
        self.set_status("Reading/writing data")
        cmd_str = "DACSB:?"                              
        resp_err = 0
        resp_ack = 1
        resp_nak = 2        
        
        resp = self.socket_write_and_read(cmd_str)
        self.debug_stream("Resp from query " + cmd_str +" :%s" %resp)
        
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','read_dacsb()')             
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_dacsb()')        
        else:     
            self.debug_stream("Reply to query is " + str(resp).rstrip('\r\n'))
            self.attr_dacsb_read = int(resp)            
            attr.set_value(self.attr_dacsb_read)
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.dacsb_read
        
    def write_dacsb(self, attr):
        self.debug_stream("In write_dacsb()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(PicoFlex.dacsb_write) ENABLED START -----#
        self.set_status("Reading/writing data")
        cmd_str = "DACSB:"+str(data)
        resp_err = 0
        resp_ack = 1
        resp_nak = 2       
        
        self.debug_stream("Write PicoFlex with " + cmd_str)                            
        resp = self.socket_write_and_read(cmd_str)
        
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','write_dacsb()')             
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','write_dacsb()')
        #----- PROTECTED REGION END -----#	//	PicoFlex.dacsb_write
        
    def write_disp(self, attr):
        self.debug_stream("In write_disp()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(PicoFlex.disp_write) ENABLED START -----#
        self.set_status("Reading/writing data")
        cmd_str = "DISP:"+str(data)
        resp_err = 0
        resp_ack = 1
        resp_nak = 2 
                                    
        resp = self.socket_write_and_read(cmd_str)
        
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','write_disp()')             
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','write_disp()')
        #----- PROTECTED REGION END -----#	//	PicoFlex.disp_write
        
    def read_picoBoardDescr(self, attr):
        self.debug_stream("In read_picoBoardDescr()")
        #----- PROTECTED REGION ID(PicoFlex.picoBoardDescr_read) ENABLED START -----#
        self.set_status("Reading/writing data")
        resp_err = 0
        resp_ack = 1
        resp_nak = 2 
        cmd_str = "DESCR:?"
        
        self.debug_stream("Writing PicoFlex with " + cmd_str)                
                    
        resp = self.socket_write_and_read(cmd_str)
        
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','write_picoBoardDescr()')             
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_picoBoardDescr()')        
        else:          
            self.debug_stream("Reply to query is " + str(resp).rstrip('\r\n'))
            self.attr_picoBoardDescr_read = str(resp)                
            attr.set_value(self.attr_picoBoardDescr_read)            
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.picoBoardDescr_read
        
    def read_picoMainBoardCode(self, attr):
        self.debug_stream("In read_picoMainBoardCode()")
        #----- PROTECTED REGION ID(PicoFlex.picoMainBoardCode_read) ENABLED START -----#
        self.set_status("Reading/writing data")
        resp_err = 0
        resp_ack = 1
        resp_nak = 2 
        cmd_str= "PCODE:?"               
        
        self.debug_stream("Writing PicoFlex with " + cmd_str.rstrip('\r\n'))                
                    
        resp = self.socket_write_and_read(cmd_str)
        
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','read_picoMainBoardCode()')             
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_picoMainBoardCode()')
        else:          
            self.debug_stream("Reply to query is " + str(resp).rstrip('\r\n'))
            self.attr_picoMainBoardCode_read = str(resp)                
            attr.set_value(self.attr_picoMainBoardCode_read)
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.picoMainBoardCode_read
        
    def read_picoBoardCalDate(self, attr):
        self.debug_stream("In read_picoBoardCalDate()")
        #----- PROTECTED REGION ID(PicoFlex.picoBoardCalDate_read) ENABLED START -----#
        self.set_status("Reading/writing data")
        resp_err = 0
        resp_ack = 1
        resp_nak = 2 
        cmd_str = "CDATE:?"
      
        self.debug_stream("Writing PicoFlex with " + cmd_str)                
                    
        resp = self.socket_write_and_read(cmd_str)
        
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','write_picoBoardCalDate()')             
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_picoBoardCalDate()')      
        else:        
            self.debug_stream("Reply to query is " + str(resp).rstrip('\r\n'))
            self.attr_picoBoardCalDate_read = str(resp)                                    
            attr.set_value(self.attr_picoBoardCalDate_read)        
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.picoBoardCalDate_read
        
    def read_picoBoardProdDate(self, attr):
        self.debug_stream("In read_picoBoardProdDate()")
        #----- PROTECTED REGION ID(PicoFlex.picoBoardProdDate_read) ENABLED START -----#
        self.set_status("Reading/writing data")
        resp_err = 0
        resp_ack = 1
        resp_nak = 2         
        cmd_str = "PDATE:?"
        
        self.debug_stream("Writing PicoFlex with " + cmd_str)                
                    
        resp = self.socket_write_and_read(cmd_str)
        
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','write_picoBoardProdDate()')             
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_picoBoardProdDate()')        
        else:     
            self.debug_stream("Reply to query is " + str(resp).rstrip('\r\n'))
            self.attr_picoBoardProdDate_read = str(resp)                
            attr.set_value(self.attr_picoBoardProdDate_read)
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.picoBoardProdDate_read
        
    def read_picoBoardSerialNo(self, attr):
        self.debug_stream("In read_picoBoardSerialNo()")
        #----- PROTECTED REGION ID(PicoFlex.picoBoardSerialNo_read) ENABLED START -----#
        self.set_status("Reading/writing data")
        resp_err = 0
        resp_ack = 1
        resp_nak = 2          
        cmd_str = "SN:?"
        
        self.debug_stream("Writing PicoFlex with " + cmd_str)                
                    
        resp = self.socket_write_and_read(cmd_str)
        
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','write_picoBoardSerialNo()')             
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_picoBoardSerialNo()')        
        else:            
            self.debug_stream("Reply to query is " + str(resp).rstrip('\r\n'))
            self.attr_picoBoardSerialNo_read = str(resp)                
            attr.set_value(self.attr_picoBoardSerialNo_read)
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.picoBoardSerialNo_read
        
    def read_picoSysStatus(self, attr):
        self.debug_stream("In read_picoSysStatus()")
        #----- PROTECTED REGION ID(PicoFlex.picoSysStatus_read) ENABLED START -----#
        self.set_status("Reading/writing data")
        resp_err = 0
        resp_ack = 1
        resp_nak = 2         
        cmd_str="SYS:?"        
                
        self.debug_stream("Query PicoFlex with " + cmd_str)                
                    
        resp = self.socket_write_and_read(cmd_str)
        
        if  resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','read_picoSysStatus()')             
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_picoSysStatus()')         
        else:
            self.debug_stream("Reply to query is " + str(resp).rstrip('\r\n'))
            self.attr_picoSysStatus_read = str(resp)            
            attr.set_value(self.attr_picoSysStatus_read)
             
        
        
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.picoSysStatus_read
        
    def write_picoSysStatus(self, attr):
        self.debug_stream("In write_picoSysStatus()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(PicoFlex.picoSysStatus_write) ENABLED START -----#
        self.set_status("Reading/writing data")
        self.debug_stream("Data: %s" % data)   
        resp_err = 0
        resp_ack = 1
        resp_nak = 2
        cmd_str=''
        
        if str(data) == "0":
            cmd_str = "SYS:REM"
        else:
            cmd_str = "SYS:LOC"
        
        self.debug_stream("Writing PicoFlex with " + cmd_str)                
                    
        resp = self.socket_write_and_read(cmd_str)
        
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','write_picoSysStatus()')             
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','write_picoSysStatus()') 
        #----- PROTECTED REGION END -----#	//	PicoFlex.picoSysStatus_write
        
    def read_picoMainFwVer(self, attr):
        self.debug_stream("In read_picoMainFwVer()")
        #----- PROTECTED REGION ID(PicoFlex.picoMainFwVer_read) ENABLED START -----#
        self.set_status("Reading/writing data")
        cmd_str = "VER:?"
        resp_err = 0
        resp_ack = 1
        resp_nak = 2        
        
        resp = self.socket_write_and_read(cmd_str)
        
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','read_picoMainFwVer()')             
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_picoMainFwVer()')
        else:
            self.debug_stream("Reply to query is " + str(resp).rstrip('\r\n'))
            self.attr_picoMainFwVer_read = str(resp)
            attr.set_value(self.attr_picoMainFwVer_read)
                    
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.picoMainFwVer_read
        
    def read_picoBoardInfo(self, attr):
        self.debug_stream("In read_picoBoardInfo()")
        #----- PROTECTED REGION ID(PicoFlex.picoBoardInfo_read) ENABLED START -----#
        self.set_status("Reading/writing data")
        cmd_str = "*IDN?"
        resp_err = 0
        resp_ack = 1
        resp_nak = 2   
        resp = self.socket_write_and_read(cmd_str)
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','read_picoBoardInfo()')             
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_picoBoardInfo()')        
        else:  
            self.debug_stream("Reply to query is " + str(resp).rstrip('\r\n'))
            self.attr_picoBoardInfo_read = str(resp)
            attr.set_value(self.attr_picoBoardInfo_read)                
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.picoBoardInfo_read
        
    def read_picoModuleFwVer(self, attr):
        self.debug_stream("In read_picoModuleFwVer()")
        #----- PROTECTED REGION ID(PicoFlex.picoModuleFwVer_read) ENABLED START -----#
        self.set_status("Reading/writing data")
        cmd_str = "VER:A:?"
        resp_err = 0
        resp_ack = 1
        resp_nak = 2
        resp = self.socket_write_and_read(cmd_str)
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','read_picoModuleFwVer()') 
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_picoModuleFwVer()') 
        else:
            self.debug_stream("Reply to query is " + str(resp).rstrip('\r\n'))
            self.attr_picoModuleFwVer_read = str(resp)
            attr.set_value(self.attr_picoMainFwVer_read)
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.picoModuleFwVer_read
        
    def read_signalSum(self, attr):
        self.debug_stream("In read_signalSum()")
        #----- PROTECTED REGION ID(PicoFlex.signalSum_read) ENABLED START -----#                
        self.set_status("Reading/writing data")
        cmd_str = "CH1RI:?"
        resp_err = 0
        resp_ack = 1
        resp_nak = 2        
        
        resp = self.socket_write_and_read(cmd_str)

        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','read_signalSum()')             
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_signalSum()') 
        else:
            self.debug_stream("Reply to query is " + str(resp).rstrip('\r\n'))
            self.attr_ch1ri_read = float(resp)                   
            attr.set_value(self.attr_ch1ri_read)
            
        cmd_str = "CH2RI:?"

        resp = self.socket_write_and_read(cmd_str)
        
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','read_signalSum()')             
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_signalSum()')
        else:
            self.debug_stream("Reply to query is " + str(resp).rstrip('\r\n'))
            self.attr_ch2ri_read = float(resp)                   
            attr.set_value(self.attr_ch2ri_read)                        
        
        self.attr_signalSum_read = self.attr_ch1ri_read + self.attr_ch2ri_read        
        attr.set_value(self.attr_signalSum_read)
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.signalSum_read
        
    def read_signalDiff(self, attr):
        self.debug_stream("In read_signalDiff()")
        #----- PROTECTED REGION ID(PicoFlex.signalDiff_read) ENABLED START -----#
        self.set_status("Reading/writing data")
        cmd_str = "CH1RI:?"
        resp_err = 0
        resp_ack = 1
        resp_nak = 2
        
        resp = self.socket_write_and_read(cmd_str)
        
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','read_signalDiff()')             
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_signalDiff()')  
        else:
            self.debug_stream("Reply to query is " + str(resp).rstrip('\r\n'))
            self.attr_ch1ri_read = float(resp)                   
            attr.set_value(self.attr_ch1ri_read)
            
        cmd_str = "CH2RI:?"

        resp = self.socket_write_and_read(cmd_str)

        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','read_signalDiff()')             
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_signalDiff()')       
        else:
            self.debug_stream("Reply to query is " + str(resp).rstrip('\r\n'))
            self.attr_ch2ri_read = float(resp)                   
            attr.set_value(self.attr_ch2ri_read)         
        
        if self.attr_propDiff_read:
            self.debug_stream("Calculate SignalDiff with compensation")
            self.attr_signalDiff_read = (self.attr_ch1ri_read - self.attr_ch2ri_read) / (self.attr_ch1ri_read + self.attr_ch2ri_read)          
            self.debug_stream("SignalDiff is " + str(self.attr_signalDiff_read))
        else:
            self.debug_stream("Calculate SignalDiff without compensation")
            self.attr_signalDiff_read = self.attr_ch1ri_read - self.attr_ch2ri_read 
            self.debug_stream("SignalDiff is " + str(self.attr_signalDiff_read))

        
        attr.set_value(self.attr_signalDiff_read)
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.signalDiff_read        
        
    def read_propDiff(self, attr):
        self.debug_stream("In read_propDiff()")
        #----- PROTECTED REGION ID(PicoFlex.propDiff_read) ENABLED START -----#
        self.set_status("Reading/writing data")
        attr.set_value(self.attr_propDiff_read)
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.propDiff_read
        
    def write_propDiff(self, attr):
        self.debug_stream("In write_propDiff()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(PicoFlex.propDiff_write) ENABLED START -----#
        self.set_status("Reading/writing data")        
        self.attr_propDiff_read = data
        attr.set_value(self.attr_propDiff_read)
        #----- PROTECTED REGION END -----#	//	PicoFlex.propDiff_write
        
    def read_picoModuleBoardCode(self, attr):
        self.debug_stream("In read_picoModuleBoardCode()")
        #----- PROTECTED REGION ID(PicoFlex.picoModuleBoardCode_read) ENABLED START -----#
        self.set_status("Reading/writing data")
        resp_err = 0
        resp_ack = 1
        resp_nak = 2
        
        cmd_str= "PCODE:A:?"               
        
        self.debug_stream("Writing PicoFlex with " + cmd_str.rstrip('\r\n'))                
                    
        resp = self.socket_write_and_read(cmd_str)
        
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','write_picoBoardDescr()')             
        elif resp == resp_ack:
            # PicoFlex accepts the configuration command
            self.set_status("Request acknowledged")             
            self.debug_stream("Request acknowledged")
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_picoModuleBoardCode()')         
        else:          
            self.debug_stream("Reply to query is " + str(resp).rstrip('\r\n'))
            self.attr_picoModuleBoardCode_read = str(resp)                     
            attr.set_value(self.attr_picoModuleBoardCode_read)
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.picoModuleBoardCode_read
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(PicoFlex.read_attr_hardware) ENABLED START -----#
        #print ("Data: %s") % data
        #attrs = self.get_device_attr()
        #try:        
            #for d in data:
                #a_name = attrs.get_attr_by_ind(d).get_name() 
               # print ("Attribute name: %s") % a_name 
        #except:
            #traceback.print_exc()
            #----- PROTECTED REGION END -----#	//	PicoFlex.read_attr_hardware


    # -------------------------------------------------------------------------
    #    PicoFlex command methods
    # -------------------------------------------------------------------------
    
    def reset(self):
        """ The purpose of the *RST command is to perform a software reset of the
        PicoFLEX device and put it back to the power-up state with all the parameters set to
        the default values.
        """
        self.debug_stream("In reset()")
        #----- PROTECTED REGION ID(PicoFlex.reset) ENABLED START -----#
        self.set_status("Reading/writing data")
        cmd_str = "*RST"
        resp_err = 0
        resp_ack = 1
        resp_nak = 2
        
        resp = self.socket_write_and_read(cmd_str)
        
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','reset()') 
        elif resp == resp_ack:
            # PicoFlex accepts the Reset command
            self.set_status("PicoFLEX reboots")             
            self.debug_stream("Reset command accepted...PicoFLEX reboots...")            
        elif resp == resp_nak:
            # PicoFlex does not accept the command/query. No attributes are updated
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Request NOT ACKOWLEDGED !")             
            self.debug_stream("Request NOT ACKOWLEDGED !")
            PyTango.Except.throw_exception('Communication Error','Request not acknowledged','read_picoModuleBoardCode()')
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.reset
        

    #----- PROTECTED REGION ID(PicoFlex.programmer_methods) ENABLED START -----#

    def isPicoFlexAlive(self):
        self.debug_stream("In isPicoFlexAlive()")
        #----- PROTECTED REGION ID(PicoFlex.picoMainFwVer_read) ENABLED START -----#
        self.set_status("Reading/writing data")
        cmd_str = "VER:?"
        resp_err = 0
        resp_ack = 1
        resp_nak = 2
        resp = self.socket_write_and_read(cmd_str)
        if resp == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','isPicoFlexAlive()') 
            
        elif resp == resp_ack:
            self.debug_stream("Command Acknowledged !")  
            return 1
          
        elif resp == resp_nak:
            self.debug_stream("Command NOT Ackowledged !")
            PyTango.Except.throw_exception('Communication Error','Command not acknowledged','isPicoFlexAlive()') 

        else: 
            self.debug_stream("PicoFlex alive and kicking !")
            self.attr_picoMainFwVer_read = str(resp)
            
        return True


#------------------------------------------------------------------
#    Read/write socket utility
#    Returns a string in case of a proper reply,
#    0 for failure, 1 for succesful reply, 2 for NAK.
#------------------------------------------------------------------
    def socket_write_and_read(self, argin):
        self.debug_stream("In socket_write_and_read()")
        self.set_status("Reading/writing socket")
        
        resp_ok = 'ACK'
        resp_not_ok = 'NAK'

        argin = str(argin) 
        picocommand = argin.rstrip('\r\n')+'\r\n'
        
        attempts = 0
        max_attempts = 2 # In an exception, retry once.
        
        while (attempts < max_attempts):
            try:                     
                reply=''                
                self.debug_stream("Sending command " + picocommand.rstrip('\r\n') + " to PicoFlex...")
                self.s.send(picocommand)               
                read_list = [self.s]                
                readable,writable,errored = select.select(read_list,[],[],0.1)                
                for rsock in readable:
                    if self.s is rsock:
                        #reply = ''                         
                        while "\r\n" not in reply:                                                                           
                            read_data = self.s.recv(1024)                                
                            reply += read_data 
                            self.debug_stream("Data received: " + reply.rstrip('\r\n'))                                                                                                                                                                                                                                                  
                if len(reply) == 0:
                    self.status_string = "Cmd " + picocommand + " failed, no reply"
                    self.debug_stream("Command " + picocommand + " failed")
                    return 0 
                elif reply.startswith(resp_ok):
                    self.status_string = "Cmd "+picocommand+" acknowledged"
                    self.debug_stream("Command " + picocommand + " acknowledged")
                    return 1
                elif reply.startswith(resp_not_ok):
                    self.status_string = "Cmd "+picocommand+" NOT acknowledged"
                    self.debug_stream("Command " + picocommand + " NOT acknowledged")
                    return 2
                elif reply.startswith(argin[:-1]):
                    reply = reply[len(argin)-1:]                    
                    self.status_string = "Cmd "+argin+" Successful"
                    self.debug_stream("returns stripped reply: %s" % reply.rstrip('\r\n'))
                    return reply   
                else:
                    if reply.startswith("PicoFlex_MainBoard"):
                        self.debug_stream("Reply to '*IDN?' command: %s" % reply)
                        return reply                        
                    else:
                        self.status_string = "Reply value not expected"
                        self.debug_stream("Reply value not expected, received: %s" % reply)

            except socket.error:
                self.set_state(PyTango.DevState.FAULT)
                PyTango.Except.throw_exception('Communication Error','Socket Error','socket_write_and_read()')         
                self.error_stream("Socket connection raised exception ")
                self.debug_stream("Socket connection raised exception ")
            
            except Exception:
                self.set_state(PyTango.DevState.FAULT)
                PyTango.Except.throw_exception('Communication Error','General Communication Error','socket_write_and_read()')         
                err_msg = traceback.print_exc(file=sys.stdout)
                self.debug_stream("Exception thrown: "+ str(err_msg))
                attempts += 1                
                

        # Socket problem persists, set state to FAULT
        self.set_state(PyTango.DevState.FAULT)
        PyTango.Except.throw_exception('Communication Error','No reply from device','socket_write_and_read()')         
    
    #----- PROTECTED REGION END -----#	//	PicoFlex.programmer_methods

class PicoFlexClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(PicoFlex.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	PicoFlex.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'ip_address':
            [PyTango.DevString, 
            "PicoFLEX IP address.",
            #["192.168.203.143"] ],
            ["localhost"] ],
        'port':
            [PyTango.DevLong, 
             '',
            [10001]],
        }


    #    Command definitions
    cmd_list = {
        'reset':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'ch1rng':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "CH1 Current Range",
                'max value': "2",
                'min value': "0",
                'description': "The purpose of the CH1RNG command is to set the gain and therefore the full\nscale range of the CH1 input. The parameter field is a number representing the\nselected gain range as reported in the following table:\n	Full Scale	Resolution(@ 24-bt)\nRNG 0	±2.5 mA	298 nA\nRNG 1	±2.5 ?A	298 fA\nRNG 2	±25 nA	2.98 fA\nThe parameter value can be set from 0 to 2; at power-up the CH1 range is set to\nits lowest gain value (0, default) in order to avoid possible damages to the device in\ncase the CH1 input is connected to a high current source/sink at start-up.",
            } ],
        'ch2rng':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "CH2 Current Range",
                'max value': "2",
                'min value': "0",
                'description': "The purpose of the CH2RNG command is to set the gain and therefore the full\nscale range of the CH2 input. The parameter field is a number representing the\nselected gain range as reported in the following table:\n	Full Scale	Resolution(@ 24-bt)\nRNG 0	±2.5 mA	298 nA\nRNG 1	±2.5 ?A	298 fA\nRNG 2	±25 nA	2.98 fA\nThe parameter value can be set from 0 to 2; at power-up the CH1 range is set to\nits lowest gain value (0, default) in order to avoid possible damages to the device in\ncase the CH2 input is connected to a high current source/sink at start-up.",
            } ],
        'ch1ri':
            [[PyTango.DevFloat,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "CH1 Calibrated Current",
                'unit': "A",
                'display unit': "[A]",
                'description': "The CH1 calibrated current value.",
            } ],
        'ch1rb':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "CH1 ADC Binary Value",
                'unit': "Raw Binary",
                'max value': "16777215",
                'min value': "0",
                'description': "CH1 ADC raw binary data value.",
            } ],
        'ch1dac':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Enable CH1 DAC Output",
                'description': "The purpose of the CH1DAC command is to enable/disable the DAC output as\na voltage monitor of the CH1 actual current value.\nThe DAC output value spans from 0 to 10V centered on the midscale value (i.e.\n5V).",
            } ],
        'ch2ri':
            [[PyTango.DevFloat,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "CH2 Calibrated Current",
                'unit': "A",
                'display unit': "[A]",
                'description': "The CH2 calibrated current value.",
            } ],
        'ch2rb':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "CH2 ADC Binary Value",
                'unit': "Raw Binary",
                'max value': "16777215",
                'min value': "0",
                'description': "CH2 ADC raw binary data value.",
            } ],
        'ch2dac':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Enable CH2 DAC Output",
                'description': "The purpose of the CH2DAC command is to enable/disable the DAC output as\na voltage monitor of the CH2 actual current value.\nThe DAC output value spans from 0 to 10V centered on the midscale value (i.e.\n5V).",
            } ],
        'dacsv':
            [[PyTango.DevFloat,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Set DAC Output Voltage",
                'unit': "V",
                'display unit': "[V]",
                'max value': "10",
                'min value': "0",
                'description': "The purpose of the DACSV command is to set/read the DAC output voltage.\nThe output voltage, that span from 0V to 10V, can be set by sending a\n?DACSV:xx.xxx? command, where the xx.xxx is the desired voltage output in Volts.\nThe query command returns the DAC voltage output in floating point notation\nwith 3 digits of precision.",
            } ],
        'dacsb':
            [[PyTango.DevULong,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Set DAC Binary Output Voltage",
                'unit': "Binary",
                'display unit': "Binary",
                'max value': "65535",
                'min value': "0",
                'description': "The purpose of the DACSB command is to set/read the DAC output voltage\nwith DAC binary raw value.\nSince the output voltage is based on a 16-bit DAC the value can range from 0 to\n65535.",
            } ],
        'disp':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'label': "Write text to display",
                'description': "The purpose of the DISP command is to write a string on the PicoFLEX front\npanel display.\nThe string can have a maximum of 12 characters and cannot have any blank\nspace or special character inside it. The string will be printed right aligned on the last\nline of the display.\nIn order to remove the string from the display the special parameter string\n?CLR? must be used.",
            } ],
        'picoBoardDescr':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "PicoFLEX Boards Description",
                'description': "The purpose of the DESCR command is to read a short description of the\ninstalled boards.",
            } ],
        'picoMainBoardCode':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "PicoFLEX Boards Code",
                'description': "The purpose of the PCODE command is to read the product code of the\ninstalled boards.",
            } ],
        'picoBoardCalDate':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "PicoFLEX Boards Calibration Date",
                'description': "The purpose of the CDATE command is to read the calibration date of the\ninstalled boards.",
            } ],
        'picoBoardProdDate':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "PicoFLEX Boards Production Date",
                'description': "The purpose of the PDATE command is to read the production date of the\ninstalled boards.",
            } ],
        'picoBoardSerialNo':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "PicoFLEX Boards Serial No.",
                'description': "The purpose of the SN command is to read the serial numbers of the installed\nboards.",
            } ],
        'picoSysStatus':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "PicoFLEX Status",
                'description': "The purpose of the SYS command is to set/read the PicoFLEX system status.\nWhen the module is set to Remote mode (?REM? parameter) the front panel\ndisplay refresh is disabled in order to avoid any conflict during the data acquisition\nand for this reason the display starts to roll vertically.\nWhen the module is set back to Local mode (?LOC? parameter) the display\nstops to roll and the displayed data are continuously updated.",
            } ],
        'picoMainFwVer':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "PicoFLEX Main Board Firmware Version",
                'description': "The purpose of the VER command is to report the firmware version currently\ninstalled in the PicoFLEX System on-board processors.",
            } ],
        'picoBoardInfo':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "PicoFLEX Boards Information",
                'description': "The purpose of the *IDN? command is to query the PicoFLEX device for the\nMain Board and the Installed Module information. The returned data are the following:\nPicoFlex_MainBoard_v1.0 ? v1.2.4 # PicoFlex_Module_v1.0 ? v1.1.2",
            } ],
        'picoModuleFwVer':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "PicoFLEX Module Firmware Version",
                'description': "The purpose of the VER command is to report the firmware version currently\ninstalled in the PicoFLEX System on-board processors.",
            } ],
        'signalSum':
            [[PyTango.DevFloat,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "SignalSum",
            } ],
        'signalDiff':
            [[PyTango.DevFloat,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "SignalDiff",
            } ],
        'propDiff':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Compensate Current Diff",
                'description': "If enabled, the signalDiff is calculated in this way: (CH1RI - CH2RI) / (CH1RI + CH2RI).\nThis is to compensate for the loss of beam energy.",
                'Memorized':"true_without_hard_applied"
            } ],
        'picoModuleBoardCode':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(PicoFlexClass, PicoFlex, 'PicoFlex')
        #----- PROTECTED REGION ID(PicoFlex.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PicoFlex.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
